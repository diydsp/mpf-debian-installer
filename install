#!/bin/bash

echo "      ##############################################"
echo "     # IT IS NOT A GOOD IDEA TO RUN THIS AS ROOT! #"
echo "    # ENVIRONMENT VARIABLES WILL NOT BUILD.      #"
echo "   #                                            #"
echo "  # IF YOU RAN THIS WITH SUDO, PRESS CTRL-C    #"
echo " # NOW AND RUN AS A NORMAL USER.              #"
echo "##############################################"

### Choose the pinball controller hardware that you will be using
echo "Which hardware will you be using? If you know, but don't have it,"
echo "choose it anyway."
echo ""
echo "(Enter 1 for FAST, 2 for P3 or P-ROC, 3 for none, or CTRL-C to quit)"
read REPLY
case $REPLY in
	1) PLATFORM="FAST";;
 	2) PLATFORM="PROC";;
  3) PLATFORM="NONE";;
esac

#echo $PLATFORM


if [ $PLATFORM != "FAST" ] && [ $PLATFORM != "PROC" ] && [ $PLATFORM != "NONE" ]
then
	echo
	echo "########################"
	echo "Please enter 1, 2, or 3"
	exit
fi

clear

echo
echo "Installing prerequsites via apt-get"

sudo add-apt-repository -y ppa:kivy-team/kivy
sudo apt-get update

sudo apt-get install -y python3-kivy

sudo apt-get install -y cython3 python3-pip libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libav-tools libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev

#####sudo apt-get -y install unzip cmake gcc g++ build-essential git-core libmpg123-0
#####sudo apt-get -y install python2.7 python-dev python-setuptools libyaml-dev mplayer
#####sudo apt-get -y install python-pygame libsdl1.2-dev python-serial

echo "[PyYAML] Installing PyYAML 3.11"

tar -zxpvf PyYAML-3.11.tar.gz
cd PyYAML-3.11
sudo python3 setup.py install

if [ $? -ne 0 ]; then
      echo "PyYAML installation failed"
      exit 1
fi

echo "Backing out to main directory..."

cd ..

##########################################
##         P-ROC and P3 Support         ##
##########################################
echo $PLATFORM
if [ $PLATFORM = "PROC" ]
then
  echo "[PROC PREREQS] Installing PROC prerequisites via apt-get"
  sudo apt-get -y install python3-dev python3-setuptools cmake gcc g++ build-essential git-core zlib1g-dev libudev-dev libusb-dev pkg-config libboost-dev

  echo "[LIBUSB1] Installing libusb1"

  tar -jxvpf libusb-1.0.18.tar.bz2
  cd libusb-1.0.18
  ./configure
  make
  sudo make install

  if [ $? -ne 0 ]; then
  echo "libusb1 install failed."
  exit 1
  fi

  echo "Backing out to main directory..."

  cd ../

  echo "[LIBUSBX] Installing libusbx"

  tar -jxvpf libusbx-1.0.18.tar.bz2
  cd libusbx-1.0.18
  ./configure
  make
  sudo make install

  if [ $? -ne 0 ]; then
  echo "libusbx install failed."
  exit 1
  fi

  echo "Backing out to main directory..."

  cd ../

  echo "[LIBFTDI1] Installing libftdi1"

  tar -jxpvf libftdi1-1.1.tar.bz2
  cd libftdi1-1.1
  mkdir bin
  cd bin
  cmake ..
  make
  sudo make install

  if [ $? -ne 0 ]; then
  echo "LIBFTDI1 install failed."
  exit 1
  fi

  echo "Backing out to main directory..."
  cd ../..

  echo "[YAML-CPP] Installing YAML-CPP"

  tar -zxpvf yaml-cpp-0.2.5.tar.gz
  cd yaml-cpp-0.2.5/
  mkdir bin
  cd bin
  cmake ..
  make
  sudo make install

  if [ $? -ne 0 ]; then
  echo "YAML-CPP install failed."
  exit 1
  fi

  echo "Backing out to main directory..."
  cd ../..

  echo "Setting up environment variables..."

  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export C_INCLUDE_PATH_TEMP=$(find /usr/ -name ftdi.h -printf '%h\072')
  export CPLUS_INCLUDE_PATH_TEMP=$(find /usr/ -name ftdi.h -printf '%h\072')
  export C_INCLUDE_PATH=$(find /usr/ -name ftdi.h -printf '%h\072')
  export CPLUS_INCLUDE_PATH=$(find /usr/ -name ftdi.h -printf '%h\072')


  echo "Stuff should be exported now"

  echo "export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> ~/.bashrc
  echo "export C_INCLUDE_PATH="$C_INCLUDE_PATH_TEMP":$C_INCLUDE_PATH" >> ~/.bashrc
  echo "export CPLUS_INCLUDE_PATH="$CPLUS_INCLUDE_PATH_TEMP":$CPLUS_INCLUDE_PATH" >> ~/.bashrc

  source ~/.bashrc

  sudo cp 50-P-ROC.rules /etc/udev/rules.d
  sudo cp 51-P3-ROC.rules /etc/udev/rules.d

  echo "[LIBPINPROC] Installing libpinproc"

### P3ROC requires libpinproc dev branch, so we'll just get that even if you use a PROC

  git clone --branch dev https://github.com/preble/libpinproc.git libpinproc
  cd libpinproc

  mkdir bin
  cd bin

  cmake -DBUILD_SHARED_LIBS=ON ..
  make
  sudo make install

  if [ $? -ne 0 ]; then
  echo "libpinproc installation failed."
  exit 1
  fi

  echo "Backing out to main directory..."

cd ../..

echo "[PyPINPROC] Installing pypinproc"

  git clone https://github.com/missionpinball/pypinproc pypinproc
  cd pypinproc
  sudo python3 setup.py install

  if [ $? -ne 0 ]; then
  echo "PyPinproc installation failed"
  exit 1
  fi

  echo "Backing out to main directory..."

cd ..

fi


if [ $PLATFORM = "PROC" ]; then
  echo "              Prerequisite Installation finished."
  echo "============================================================"
  echo "!!! You should probably restart to complete installation !!!"
  echo "     (It's complicated, but then again, so is pinball.)"
  echo ""
else
  echo "              Prerequisite Installation finished."
  echo "============================================================"
  echo "   You shouldn't have to reboot, but what the heck, right?  "
  echo ""
fi

echo "      When you are done, you'll need to install MPF. The"
echo "       quick way is to simply run: 'pip3 install mpf-mc'"
echo "        after you reboot. More information is available"
echo "                  at docs.missionpinball.org"
echo ""
echo "                     Happy pinballing!"
echo ""
read -p "Do you want to reboot now? (y or n)" -n 1 -r REBOOTREPLY
echo    # (optional) move to a new line
if [[ $REBOOTREPLY = "y" ]]; then
  read -p "Are you sure you want to reboot? (y or n)" -n 1 -r REBOOTREPLYCONFIRM
  echo    # (optional) move to a new line
  if [[ $REBOOTREPLYCONFIRM = "y" ]]; then
    sudo shutdown -r now
  else
    echo "REMEMBER TO REBOOT BEFORE YOU TRY TO USE THE GAME"
  fi
else
  echo "REMEMBER TO REBOOT BEFORE YOU TRY TO USE THE GAME"
fi
